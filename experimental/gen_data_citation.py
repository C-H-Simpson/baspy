import baspy as bp
import pandas as pd
import requests
import xml.etree.ElementTree as ET


# %%
def _generate_citation(example: pd.Series) -> dict:
    """Generate a data citation from a baspy row. Call via generate_citations.

    We get the xml metadata from CERA, and format it as a citation.
    """
    MIP = example.MIP
    Centre = example.Centre
    Model = example.Model
    Experiment = example.Experiment
    Version = example.Version
    url = (
        "https://cera-www.dkrz.de/WDCC/ui/cerasearch/cerarest/"
        + f"exportcmip6?input=CMIP6.{MIP}.{Centre}.{Model}.{Experiment}"
        + "&wt=XML"
    )
    response = requests.get(url)
    xml = response.text

    root = ET.fromstring(xml)

    root.tag
    root.attrib

    doi = ""
    publisher = ""
    publicationYear = ""
    givenNames = []
    familyNames = []

    for child in root:
        if "identifier" in child.tag and child.attrib["identifierType"] == "DOI":
            doi = child.text
        elif "creators" in child.tag:
            for creator in list(child):
                for x in list(creator):
                    if "givenName" in x.tag:
                        givenNames.append(x.text)
                    elif "familyName" in x.tag:
                        familyNames.append(x.text)
        elif "publisher" in child.tag:
            publisher = child.text
        elif "publicationYear" in child.tag:
            publicationYear = child.text

    initials = [".".join([c for c in s if c.isupper()]) + "." for s in givenNames]
    names = [", ".join([a, b]) for a, b in zip(familyNames, initials)]

    citation = (
        ", ".join(names)
        + f" ({publicationYear}). {Centre} {Model} model output prepared for CMIP6 {MIP} {Experiment}. {Version}. {publisher}. https://doi.org/{doi}"
    )

    return {
        "MIP": MIP,
        "Centre": Centre,
        "Model": Model,
        "Experiment": Experiment,
        "Version": Version,
        "doi": doi,
        "publisher": publisher,
        "publicationYear": publicationYear,
        "givenNames": givenNames,
        "familyNames": familyNames,
        "names": names,
        "citation": citation,
    }


def generate_citations(df: pd.DataFrame) -> pd.DataFrame:
    """Generate data citations from a baspy dataframe.

    Input: dataframe of model runs generated by baspy
    Output: dataframe with citations generated.
    """
    results = []
    for row in df.itertuples():
        results.append(_generate_citation(row))
    return pd.DataFrame(results)


# %%
if __name__ == "__main__":
    experiments = ()

    # Get some data with baspy
    catlg = bp.catalogue(
        dataset="cmip6",
        Experiment=["historical", "ssp245",],
        CMOR="day",
        Var=["tas", "hurs", "tasmax", "tasmin"],
        complete_var_set=True,
    )

    print("Demo generate_citations")
    print(generate_citations(catlg.sample(5).reset_index(drop=True))["citation"])
